[project]
name = "scorebook"
dynamic = ["version"]
description = "A Python project for LLM evaluation."
authors = [
    { name = "Euan Campbell", email = "euan@trismik.com"},
    { name = "Marco Basaldella", email = "marco@trismik.com" }
]
readme = "README.md"
requires-python = ">=3.9, <3.14"
dependencies = [
    "datasets>=3.6.0",
    "notebook (>=7.4.5,<8.0.0)",
    "trismik (>=1.0.1, <2.0.0)",
    "ipywidgets>=8.0.0",
]

[project.scripts]
scorebook = "scorebook.cli.main:main"

[tool.poetry]
version = "0.0.11"  # base version
packages = [{ include = "scorebook", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.9,<3.14"
datasets = ">=3.6.0"
notebook = ">=7.4.5,<8.0.0"
trismik = ">=1.0.1,<2.0.0"
ipywidgets = ">=8.0.0"

# Optional dependencies
openai = {version = "*", optional = true}
python-dotenv = {version = "*", optional = true}
portkey-ai = {version = "*", optional = true}
boto3 = {version = "1.40.0", optional = true}
google-genai = {version = "*", optional = true}
pandas = {version = "*", optional = true}
google-cloud-storage = {version = "*", optional = true}
fsspec = {version = "*", extras = ["gcs"], optional = true}
transformers = {version = "*", optional = true}
torch = {version = "*", optional = true}
torchvision = {version = "*", optional = true}
torchaudio = {version = "*", optional = true}
accelerate = {version = "*", optional = true}

[tool.poetry.extras]
openai = ["openai", "python-dotenv"]
portkey = ["portkey-ai", "python-dotenv"]
bedrock = ["boto3", "python-dotenv"]
vertex = ["google-genai", "pandas", "google-cloud-storage", "fsspec", "python-dotenv"]
examples = ["transformers", "torch", "torchvision", "torchaudio", "accelerate", "notebook"]

[[tool.poetry.source]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
priority = "supplemental"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-asyncio = "^0.24.0"
pre-commit = "^3.6.2"
black = "^24.3.0"
isort = "^5.13.2"
Flake8-pyproject = "^1.2.3"
flake8 = "^7.0.0"
mypy = "^1.15.0"
autoflake = "^2.3.1"
toml = "^0.10.2"
types-pyyaml = "^6.0.12.20250822"
unasync = {version = "^0.5.0", python = ">=3.9,<4"}
tomlkit = "^0.13.2"
detect-secrets = "^1.5.0"

[project.optional-dependencies]
openai = ["openai", "python-dotenv"]
portkey = ["portkey-ai", "python-dotenv"]
bedrock = ["boto3==1.40.0", "python-dotenv"]
vertex = ["google-genai", "pandas", "google-cloud-storage", "fsspec[gcs]", "python-dotenv"]
examples = ["transformers", "torch", "torchvision", "torchaudio", "accelerate", "notebook"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "class"
markers = [
    "unit: Unit tests that use mocks and don't require external dependencies",
    "integration: Integration tests that may require network access or external services",
]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
install_types = true

[tool.flake8] # note that this depends on Flake8-pyproject
ignore = ["D202", "W503", "W504"]

[[tool.unasync.rules]]
fromdir = "src/scorebook/evaluate/_async/"
todir = "src/scorebook/evaluate/_sync/"
replacements."scorebook.score._async.score_async" = "scorebook.score._sync.score"
replacements."scorebook.score._async" = "scorebook.score._sync"
replacements.evaluate_async = "evaluate"
replacements."Asynchronous evaluation complete" = "Synchronous evaluation complete"
replacements."    run_results = asyncio.gather(*[worker(run) for run in runs])" = "    run_results = [worker(run) for run in runs]"
replacements.async_nullcontext = "nullcontext"
replacements.create_trismik_async_client = "create_trismik_sync_client"
replacements.score_async = "score"

[[tool.unasync.rules]]
fromdir = "src/scorebook/score/_async/"
todir = "src/scorebook/score/_sync/"
replacements.score_async = "score"
replacements."Async scoring complete" = "Scoring complete"
replacements.calculate_metric_scores_async = "calculate_metric_scores"
replacements.upload_run_result_async = "upload_run_result"
